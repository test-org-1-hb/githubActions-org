name: Test Docker-in-Docker Runner

# This allows you to run the workflow manually from the Actions tab in GitHub
on:
  workflow_dispatch:
  push:
    branches:
      - main # Or whichever branch you prefer

jobs:
  build-and-test-docker-image:
    # This is the critical line that tells GitHub to use your self-hosted runners
    runs-on: small-runners-cluster-5

    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4

      - name: 2. Verify Docker is running and connected
        run: |
          echo "--- Docker Version ---"
          docker --version
          echo
          echo "--- Docker Daemon Info ---"
          docker info

      - name: 3. Create a simple Dockerfile for testing
        run: |
          echo 'FROM alpine:latest' > Dockerfile
          echo 'CMD ["echo", "Hello from inside the Docker container!"]' >> Dockerfile
          echo
          echo "--- Generated Dockerfile content ---"
          cat Dockerfile

      - name: 4. Build the test Docker image
        run: docker build -t my-test-image:latest .

      - name: 5. Run the built container to confirm it works
        run: docker run --rm my-test-image:latest

      # --- Optional Step: Pushing to a Registry ---
      # - name: 6. Log in to a container registry (e.g., GitHub Container Registry)
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: 7. Tag and Push the image to the registry
      #   run: |
      #     docker tag my-test-image:latest ghcr.io/${{ github.repository }}/my-test-image:latest
      #     docker push ghcr.io/${{ github.repository }}/my-test-image:latest
